set-option -g default-shell $SHELL
unbind C-b
set -g prefix C-a
bind C-a send-prefix
bind x kill-pane # skip "kill-pane 1? (y/n)" prompt
# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on
set -s extended-keys on
# Colors
grey="#292f39"
bluish_gray="#6272a4"
purple="#bd93f9"
pink="#ff79c6"
light_cyan="#8be9fd"
bright_green="#50fa7b"
bone="#f8f8f2"
set -g status-bg ${grey}
set -g status-fg default
set -g popup-border-lines rounded
set -g popup-border-style fg=#5f5f5f
set -g status-interval 15
set -g status-right-length 40
set -g word-separators "!\"#$%&'()*+,-./:;<=>?@[\\]^`{|}~"
set -g pane-border-style fg=${bluish_gray}
set -g pane-active-border-style fg=${pink}
set -g detach-on-destroy off  # don't exit from tmux when closing a session
set -gq allow-passthrough on
set -g visual-activity off
bind "t" run-shell "sesh connect \"$(
	sesh list | fzf-tmux -p 55%,60% \
		--no-sort --ansi --border-label ' sesh ' --prompt '󰍜  ' \
		--header '  ^a all ^f find ^x zoxide ^s sessions ^d kill session' \
		--bind 'tab:down,btab:up' \
		--bind 'ctrl-a:change-prompt(󰍜  )+reload(sesh list)' \
		--bind 'ctrl-s:change-prompt(  )+reload(sesh list -t)' \
		--bind 'ctrl-x:change-prompt(  )+reload(sesh list -z)' \
		--bind 'ctrl-f:change-prompt(󰍉  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
		--bind 'ctrl-d:execute(tmux kill-session -t {})+change-prompt(󰍜  )+reload(sesh list)'
)\""
set-window-option -g mode-keys vi
bind -n C-S-Left swap-window -d -t -1
bind -n C-S-Right swap-window -d -t +1
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color*:Tc,xterm-256color*:RGB"
# message text
set -g message-style bg=${grey},fg=${light_cyan}
set -g status-style bg=${grey},fg=${purple}

# set -g status-interval 1
set -g status-left-length 20

# status left
# are we controlling tmux or the content of the panes?
set -g status-left "#[bg=${bright_green}]#[fg=${grey}]#{tmux_mode_indicator}"
set -g status-right ''

# window status
set-window-option -g window-status-style fg=${purple},bg=default
set-window-option -g window-status-current-style fg=${pink},bg=${grey}
set -g window-status-current-format "#[fg=${grey}]#[bg=${purple}] #I #W #{?window_zoomed_flag, ,}"
set -g window-status-format "#[fg=${bone}]#[bg=${grey}] #I #W #{?window_bell_flag,󰂞 ,}#{?window_zoomed_flag, ,}"

# List of plugins
set -g @plugin "MunifTanjim/tmux-mode-indicator"
set -g @plugin "MunifTanjim/tmux-suspend"

#Plugins settings:
set -g @suspend_key "F12"
# prompt to display when tmux prefix key is pressed
set -g @mode_indicator_prefix_prompt " ☺ "
# prompt to display when tmux is in copy mode
set -g @mode_indicator_copy_prompt " ☺ "
# prompt to display when tmux has synchronized panes
set -g @mode_indicator_sync_prompt " ☺ "
# prompt to display when tmux is in normal mode
set -g @mode_indicator_empty_prompt " ☺ "
# style values for prefix prompt
set -g @mode_indicator_prefix_mode_style "bg=blue,fg=black"
# style values for copy prompt
set -g @mode_indicator_copy_mode_style "bg=yellow,fg=black"
# style values for sync prompt
set -g @mode_indicator_sync_mode_style "bg=red,fg=black"
# style values for empty prompt
set -g @mode_indicator_empty_mode_style "bg=cyan,fg=black"
set -g @suspend_suspended_options " \
  @mode_indicator_custom_prompt::  , \
  @mode_indicator_custom_mode_style::bg=brightblack\\,fg=white, \
"

# Smart pane switching with awareness of vim and fzf
# Default snippet from vim-tmux-navigator helps with (neo)vim but my keymap for fzf <ctrl-j>/<ctrl-k> doesn't work with it
# I've found answer for my problem here from gfontenot
# https://github.com/christoomey/vim-tmux-navigator/issues/188#issuecomment-347885707

forward_programs="view|n?vim?|fzf|lazygit"
should_forward="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?($forward_programs)(diff)?$'"

bind -n "C-h" if-shell "$should_forward" "send-keys C-h" { if -F "#{pane_at_left}" "" "select-pane -L" }
bind -n "C-j" if-shell "$should_forward" "send-keys C-j" { if -F "#{pane_at_bottom}" "" "select-pane -D" }
bind -n "C-k" if-shell "$should_forward" "send-keys C-k" { if -F "#{pane_at_top}" "" "select-pane -U" }
bind -n "C-l" if-shell "$should_forward" "send-keys C-l" { if -F "#{pane_at_right}" "" "select-pane -R" }

bind -T copy-mode-vi "C-h" if -F "#{pane_at_left}" "" "select-pane -L"
bind -T copy-mode-vi "C-j" if -F "#{pane_at_bottom}" "" "select-pane -D"
bind -T copy-mode-vi "C-k" if -F "#{pane_at_top}" "" "select-pane -U"
bind -T copy-mode-vi "C-l" if -F "#{pane_at_right}" "" "select-pane -R"

# Resize 

bind -n "M-h" if-shell "$should_forward" "send-keys M-h" "resize-pane -L 5"
bind -n "M-j" if-shell "$should_forward" "send-keys M-j" "resize-pane -D 5"
bind -n "M-k" if-shell "$should_forward" "send-keys M-k" "resize-pane -U 5"
bind -n "M-l" if-shell "$should_forward" "send-keys M-l" "resize-pane -R 5"

bind -T copy-mode-vi M-h resize-pane -L 5
bind -T copy-mode-vi M-j resize-pane -D 5
bind -T copy-mode-vi M-k resize-pane -U 5
bind -T copy-mode-vi M-l resize-pane -R 5

# Window bindings
bind O new-window -c "#{pane_current_path}"
bind '"' split-window -h -c "#{pane_current_path}"
bind % split-window -v -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"

# Vim keybindings
bind -T prefix "v" copy-mode
bind -T copy-mode-vi "v" send -X begin-selection
bind -T copy-mode-vi "y" send -X copy-selection
bind m choose-window -F "#{window_index}: #{window_name}" "join-pane -h -t %%"
bind M choose-window -F "#{window_index}: #{window_name}" "join-pane -v -t %%"
bind b break-pane
bind -n Pageup copy-mode -u
bind -n Pagedown copy-mode -u

bind l switch-client -l

# Reload tmux config
bind r source-file "$XDG_CONFIG_HOME/tmux/tmux.conf"

##################################################################################
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
setenv -g TMUX_PLUGIN_MANAGER_PATH "$XDG_CONFIG_HOME/tmux/plugins/"
set -g @plugin "tmux-plugins/tpm"
set -g @plugin "tmux-plugins/tmux-sensible"
run "$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"
