#!/usr/bin/env python3

import argparse
import json
import os
import sys
import traceback as tb
from pathlib import Path
from typing import Literal, TextIO, cast


def main() -> Literal[0]:
    parser = argparse.ArgumentParser(description="Merge portainer templates without duplicates", add_help=False)
    parser.add_argument(
        "files",
        help="Portainer template files (JSON)",
        nargs="+",
        type=argparse.FileType("r"),
        metavar="INPUT_FILES",
    )
    parser.add_argument(
        "-h",
        "--help",
        action="help",
        default=argparse.SUPPRESS,
        help="Example: ./merge_portainer_templates -o merged.json templates_1.json templates_2.json",
    )
    parser.add_argument(
        "-o",
        "--output",
        help="Output file, by default output to stdout",
        default=sys.stdout,
        metavar="OUTPUT_FILE",
    )
    args = parser.parse_args()

    unique_templates: list[dict] = []
    version = None
    try:
        for f in args.files:
            f = cast(TextIO, f)
            data: dict = json.load(f)
            if version is None:
                version = data["version"]
            elif version != data["version"]:
                print("Templates are not for the same portainer version")
                raise SystemExit(1)

            templates: list[dict] = data["templates"]
            for t in templates:
                if t not in unique_templates:
                    unique_templates.append(t)

        merged_templates = {
            "version": version,
            "templates": unique_templates,
        }
        if args.output in ["-", "/dev/stdout"]:
            print(json.dumps(merged_templates, indent=2), flush=True)
        else:
            with open(args.output, "w", encoding="utf-8") as f:
                json.dump(merged_templates, f, indent=2)
            print(
                (
                    f"Merged {len(args.files)} template files\n"
                    f"Total unique templates: {len(unique_templates)}\n"
                    f"Output file: {Path(f.name).absolute()}\n"
                ),
            )
    except BrokenPipeError as e:
        devnull = os.open(os.devnull, os.O_WRONLY)
        os.dup2(devnull, sys.stdout.fileno())
        raise SystemExit(0) from e
    except Exception as e:
        print("Error occured during merging, files closed")
        raise SystemExit(tb.format_exc()) from e
    finally:
        for f in args.files:
            f.close()
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
