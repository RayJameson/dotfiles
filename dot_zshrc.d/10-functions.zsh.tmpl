cdl() {
    cd "$(readlink $1)"
}
ce() {
    cargo --explain $1
}
nvm_init() {
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}
alias_source() {
    zsh -ixc : 2>&1 | grep $1
}
check_venv() {
    if [[ -d .venv ]]; then
        source .venv/bin/activate
    fi
}
autoload -Uz add-zsh-hook
add-zsh-hook precmd check_venv
{{ if lookPath "mise" -}}
check_mise() {
    if [[ -f mise.toml ]]; then
        eval "$(mise activate zsh)"
    fi
}
add-zsh-hook precmd check_mise
{{- end}}

{{ if lookPath "pyenv" -}}
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
pyvenv() {
    local venv_name=${2:-$(basename $(pwd))}
    pyenv virtualenv $1 $venv_name
    pyenv local $venv_name
}
pyenv_init() {
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"

}
check_pyenv_init() {
    if [[ -f .python-version ]]; then
        pyenv_init
    fi
}
# add check_pyenv_init function to precmd_functions array
add-zsh-hook precmd check_pyenv_init
{{- end }}
{{ if lookPath "uv" -}}
uvnew() {
    local project_name="$1"
    shift
    [[ -z $project_name ]] && return
    local python_version="$1"
    shift
    uv init "$project_name" --python="$python_version" "$@"
    cd "$project_name"
    uv venv
    source .venv/bin/activate
}
{{- end }}

tm() {
    local session_name=${1:-"main"}
    tmux new -A -s $session_name
}
# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # Ubuntu on Windows using the Linux subsystem
        alias open='explorer.exe'
    else
        alias open='xdg-open'
    fi
fi
function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi;
}
function czde() {
    chezmoi destroy --interactive $(chezmoi managed --path-style absolute | fzf-tmux $FZF_TMUX_OPTS --multi --header='Destroy: remove from source (chezmoi) and destination (home)')
}
function czf() {
    chezmoi forget --interactive $(chezmoi managed --path-style absolute | fzf-tmux $FZF_TMUX_OPTS --multi --header='Forget: remove only in source (chezmoi)')
}
{{- if lookPath "yazi" }}
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}
{{- end }}
